// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array twoToTheI;
    static int screenBaseAddress;
    static boolean isColorBlack;

    /** Initializes the Screen. */
    function void init() {
        var int i, j;
        let screenBaseAddress = 16384;
        let twoToTheI = Array.new(16);
        let twoToTheI[0] = 1;
        let twoToTheI[1] = 2;
        let twoToTheI[2] = 4;
        let twoToTheI[3] = 8;
        let twoToTheI[4] = 16;
        let twoToTheI[5] = 32;
        let twoToTheI[6] = 64;
        let twoToTheI[7] = 128;
        let twoToTheI[8] = 256;
        let twoToTheI[9] = 512;
        let twoToTheI[10] = 1024;
        let twoToTheI[11] = 2048;
        let twoToTheI[12] = 4096;
        let twoToTheI[13] = 8192;
        let twoToTheI[14] = 16384;
        let twoToTheI[15] = 32767 + 1;

        do Screen.setColor(true);

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int x, y, address;
        let x = 0;
        while (x < 512) { 
            let y = 0;
            while (y < 256) {
                let address = screenBaseAddress + (32 * y) + (x / 16);
                do Memory.poke(address, 0);
                let y = y + 1;
            }
            let x = x + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let isColorBlack = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value;

        let address = screenBaseAddress + (32 * y) + (x / 16);
        let value = Memory.peek(address);
       
        // modulo 16
        while ((x = 16) | ( x > 16)) {
          let x = x - 16;
        }

        // set the ith bit
        if (isColorBlack){ 
        let value = value | twoToTheI[x];
        } else {
            let value = value & ~twoToTheI[x];
        }
        do Memory.poke(address, value);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, a, b, diff, drawX, drawY;
        var boolean xDir, yDir;

        let x = x1;
        let y = y1;

        let xDir = x2 > x1;
        let yDir = y2 > y1;

        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);

        let a = 0;
        let b = 0;
        let diff = 0;

        if (y1 = y2) {
        while ((a < dx) | (a = dx)) {
            if (xDir) {
            let drawX = x+a;
            } else {
            let drawX = x-a;
            }
            do Screen.drawPixel(drawX, y1);
            let a = a+1;
        }

        return;
        }

        while (((a < dx) | (a = dx)) & (((b < dy) | (b = dy)))) {
        if (xDir) {
            let drawX = x+a;
        } else {
            let drawX = x-a;
        }
        if (yDir) {
            let drawY = y+b;
        } else {
            let drawY = y-b;
        }
        do Screen.drawPixel(drawX, drawY);
        if (diff < 0) {
            let a = a + 1;
            let diff = diff + dy;
        } else {
            let b = b + 1;
            let diff = diff - dx;
        }
        }
        
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;

        while ((y < y2) | (y = y2)) {
        do Screen.drawLine(x1, y, x2, y);
        let y = y+1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, x1, x2, y1, y2, sqrt;

        // Limit r to avoid potential overflow
        if (r > 181) {
            return;
        }

        let dy = -r;

        while((dy < r) | (dy = r)) {
            let sqrt = Math.sqrt((r * r) - (dy * dy));
            let x1 = x - sqrt;
            let y1 = y + dy;
            let x2 = x + sqrt; 
            let y2 = y + dy;
            do Screen.drawLine(x1, y1, x2, y2);

            let dy = dy + 1;
        }
    return;
    }
}
