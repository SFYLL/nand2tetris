// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToTheI;
    /** Initializes the library. */
    function void init() {
        var int i, j;
        let twoToTheI = Array.new(16);
        let twoToTheI[0] = 1;
        let twoToTheI[1] = 2;
        let twoToTheI[2] = 4;
        let twoToTheI[3] = 8;
        let twoToTheI[4] = 16;
        let twoToTheI[5] = 32;
        let twoToTheI[6] = 64;
        let twoToTheI[7] = 128;
        let twoToTheI[8] = 256;
        let twoToTheI[9] = 512;
        let twoToTheI[10] = 1024;
        let twoToTheI[11] = 2048;
        let twoToTheI[12] = 4096;
        let twoToTheI[13] = 8192;
        let twoToTheI[14] = 16384;
        let twoToTheI[15] = 32767 + 1;
        return;
    }

    function boolean bit(int x, int i) {
        return ((x & twoToTheI[i]) = twoToTheI[i]);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int i;

        let sum = 0;
        let shiftedX = x;
        let i = 0;

        while (i < 16) {
        if (Math.bit(y, i)) {
            let sum = sum + shiftedX;
        }
        let shiftedX = shiftedX + shiftedX;
        let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, result;
        var boolean negX, negY;

        let negX = x < 0;
        let negY = y < 0;
        let x = Math.abs(x);
        let y = Math.abs(y);
        
        if ((y > x) | (y < 0)) { return 0; }
        
        let q = Math.divide(x, y + y);

        if ((x - (2 * q * y)) < y) {
            let result = q + q;
        } else {
            let result = q + q + 1;
        }

        if (negX = negY) {
            return result;
        } else {
            return -result;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, tmp, tmpSquared;
        let y = 0;
        let j = 7; 
        
        while (j > -1) {
            let tmp = y + twoToTheI[j];
            let tmpSquared = tmp * tmp;
            if (((tmpSquared < x ) | (tmpSquared = x)) & (tmpSquared > 0 )) {
                let y = tmp;
            }
            let j = j - 1;
        }
        return y;
    }


    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        }
        else {
            return a;
        }
    }
}

