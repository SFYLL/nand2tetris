// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16 (a=instruction, b=ALUOutput, sel=instruction[15], out=mux1OutInstruction);
    Not (in=instruction[15], out=notbit15);
	Mux (a=notbit15, b=instruction[5], sel=instruction[15], out=aregload);
    //Register A
    ARegister (in=mux1OutInstruction, load=aregload, out=Aregister, out[0..14]=addressM);
    
    //ALU Input
    Mux16 (a=Aregister, b=inM, sel=instruction[12], out=ALUInput);
    
    //Register D
    And(a=instruction[4], b=instruction[15], out=dregload);
    DRegister (in=ALUOutput, load=dregload, out=Dregister);
    
    ALU (x=Dregister, y=ALUInput,
    zx=instruction[11], nx=instruction[10], 
	zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
    out=ALUOutput, out= outM,  zr=zr, ng=ng);

    //WriteM output
    And(a=instruction[15], b=instruction[3], out=writeM);

    ///jump bits: 000, no jump; 111: unconditional jump, xxx:conditional jump
    //JUMP LOGIC
    Not(in=ng, out=greaterOrEqualToZero);
    And(a=ng, b=zr, out=lowerOrEqualToZero);
    And (a=notZero, b=greaterOrEqualToZero, out=strictlyGreaterThan0);
    Not(in=zr, out=notZero);
    //JGT
    And(a=strictlyGreaterThan0, b=instruction[0], out=JGT);
    //JEQ 
    And(a=zr, b=instruction[1], out=JEQ);
    //Temp And to test for JGE
    And(a=instruction[0], b=instruction[1], out=instruction1and0);
    And(a=instruction1and0, b=greaterOrEqualToZero, out=JGE);
    //JLT
    And(a=instruction[2], b=ng, out=JLT);
    //JNE
    And(a=instruction[0], b=instruction[2], out=instruction2and0);
    And(a=instruction2and0, b=notZero, out=JNE);
    //JLE
    And(a=instruction[2], b=instruction[1], out=instruction2and1);
    And(a=instruction2and1, b=ng, out= JLE);
    //Unconditional jump
    And(a=instruction2and1, b=instruction1and0, out=unconditionalJump);

    //Test for any jump, or no jump
    Or (a=JGT, b=JEQ, out=test1);
    Or (a=test1, b=JEQ, out=test2);
    Or (a=test2, b=JLT, out=test3);
    Or (a=test3, b=JNE, out=test4);
    Or (a=test4, b=JLE, out=test5);
    Or (a=test5, b=unconditionalJump, out=test6);
    And(a=instruction[15], b=test6, out=isJump);
    PC (in=Aregister, load=isJump, inc=true, reset=reset, out[0..14]=pc); 
}
