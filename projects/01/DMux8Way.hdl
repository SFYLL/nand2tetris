// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux8Way.hdl

/**
 * 8-way demultiplexor:
 * {a, b, c, d, e, f, g, h} = {in, 0, 0, 0, 0, 0, 0, 0} if sel == 000
 *                            {0, in, 0, 0, 0, 0, 0, 0} if sel == 001
 *                            etc.
 *                            {0, 0, 0, 0, 0, 0, 0, in} if sel == 111
 */

CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:
    // Put your code here:
    Not(in=sel[0], out=notSel0);
    Not(in=sel[1], out=notSel1);
    Not(in=sel[2], out=notSel2);
    And (a=notSel0, b=notSel1, out=aSelTemp);
    And (a=aSelTemp, b=notSel2, out=aSel);
    DMux (in=in, sel=aSel, a=binA, b=a);
    And (a=sel[0], b=sel[1], out=dSelTemp);
    And (a=dSelTemp, b=notSel2, out=dSel);
    DMux (in=in, sel=dSel, a=binAdSel, b=d);
    And (a=notSel1, b=sel[0], out = bSelTemp);
    And (a=bSelTemp, b=notSel2, out=bSel);
    DMux (in=in, sel=bSel, a=binAbSel, b=b);
    And (a=notSel0, b=sel[1], out = cSelTemp);
    And (a=cSelTemp, b=notSel2, out = cSel);
    DMux (in=in, sel=cSel, a=binAcSel, b=c);
    And (a=notSel0, b=notSel1, out = eSelTemp);
    And (a=eSelTemp, b=sel[2], out = eSel);
    DMux (in=in, sel=eSel, a=binAeSel, b=e);
    And (a=sel[0], b=notSel1, out = fSelTemp);
    And (a=eSelTemp, b=sel[2], out = fSel);
    DMux (in=in, sel=fSel, a=binAfSel, b=f);
    And (a=notSel0, b=sel[1], out = gSelTemp);
    And (a=gSelTemp, b=sel[2], out = gSel);
    DMux (in=in, sel=gSel, a=binAgSel, b=g);
    And (a=sel[0], b=sel[1], out = hSelTemp);
    And (a=hSelTemp, b=sel[2], out = hSel);
    DMux (in=in, sel=hSel, a=binAhSel, b=h);
    }
